From ed3c34948164ae2a3870bda17a69cf1158c28fe1 Mon Sep 17 00:00:00 2001
From: "dunno@dunno" <dunno@dunno>
Date: Thu, 25 Oct 2018 01:27:30 -0400
Subject: [PATCH 1/2] CrtLibSupport.h changes

---
 Cryptlib/Include/CrtLibSupport.h | 92 +---------------------------------------
 1 file changed, 2 insertions(+), 90 deletions(-)

diff --git a/Cryptlib/Include/CrtLibSupport.h b/Cryptlib/Include/CrtLibSupport.h
index 2eeab9a..3725020 100644
--- a/Cryptlib/Include/CrtLibSupport.h
+++ b/Cryptlib/Include/CrtLibSupport.h
@@ -82,90 +82,6 @@ typedef VOID  *FILE;
 #define va_start  VA_START
 #define va_end    VA_END
 
-# if !defined(NO_BUILTIN_VA_FUNCS)
-
-typedef __builtin_va_list VA_LIST;
-
-#define VA_START(Marker, Parameter)  __builtin_va_start (Marker, Parameter)
-
-#define VA_ARG(Marker, TYPE)         ((sizeof (TYPE) < sizeof (UINTN)) ? (TYPE)(__builtin_va_arg (Marker, UINTN)) : (TYPE)(__builtin_va_arg (Marker, TYPE)))
-
-#define VA_END(Marker)               __builtin_va_end (Marker)
-
-#define VA_COPY(Dest, Start)         __builtin_va_copy (Dest, Start)
-
-# else
-
-#define _INT_SIZE_OF(n) ((sizeof (n) + sizeof (UINTN) - 1) &~(sizeof (UINTN) - 1))
-///
-/// Variable used to traverse the list of arguments. This type can vary by
-/// implementation and could be an array or structure.
-///
-typedef CHAR8 *VA_LIST;
-
-/**
-  Retrieves a pointer to the beginning of a variable argument list, based on
-  the name of the parameter that immediately precedes the variable argument list.
-
-  This function initializes Marker to point to the beginning of the variable
-  argument list that immediately follows Parameter.  The method for computing the
-  pointer to the next argument in the argument list is CPU-specific following the
-  EFIAPI ABI.
-
-  @param   Marker       The VA_LIST used to traverse the list of arguments.
-  @param   Parameter    The name of the parameter that immediately precedes
-                        the variable argument list.
-
-  @return  A pointer to the beginning of a variable argument list.
-
-**/
-#define VA_START(Marker, Parameter) (Marker = (VA_LIST) ((UINTN) & (Parameter) + _INT_SIZE_OF (Parameter)))
-
-/**
-  Returns an argument of a specified type from a variable argument list and updates
-  the pointer to the variable argument list to point to the next argument.
-
-  This function returns an argument of the type specified by TYPE from the beginning
-  of the variable argument list specified by Marker.  Marker is then updated to point
-  to the next argument in the variable argument list.  The method for computing the
-  pointer to the next argument in the argument list is CPU-specific following the EFIAPI ABI.
-
-  @param   Marker   VA_LIST used to traverse the list of arguments.
-  @param   TYPE     The type of argument to retrieve from the beginning
-                    of the variable argument list.
-
-  @return  An argument of the type specified by TYPE.
-
-**/
-#define VA_ARG(Marker, TYPE)   (*(TYPE *) ((Marker += _INT_SIZE_OF (TYPE)) - _INT_SIZE_OF (TYPE)))
-
-/**
-  Terminates the use of a variable argument list.
-
-  This function initializes Marker so it can no longer be used with VA_ARG().
-  After this macro is used, the only way to access the variable argument list is
-  by using VA_START() again.
-
-  @param   Marker   VA_LIST used to traverse the list of arguments.
-
-**/
-#define VA_END(Marker)      (Marker = (VA_LIST) 0)
-
-/**
-  Initializes a VA_LIST as a copy of an existing VA_LIST.
-
-  This macro initializes Dest as a copy of Start, as if the VA_START macro had been applied to Dest
-  followed by the same sequence of uses of the VA_ARG macro as had previously been used to reach
-  the present state of Start.
-
-  @param   Dest   VA_LIST used to traverse the list of arguments.
-  @param   Start  VA_LIST used to traverse the list of arguments.
-
-**/
-#define VA_COPY(Dest, Start)  ((void)((Dest) = (Start)))
-
-# endif
-
 #else // __CC_ARM
 #define va_start(Marker, Parameter)   __va_start(Marker, Parameter)
 #define va_arg(Marker, TYPE)          __va_arg(Marker, TYPE)
@@ -364,11 +280,7 @@ extern FILE  *stdout;
 //
 // Macros that directly map functions to BaseLib, BaseMemoryLib, and DebugLib functions
 //
-#define memcpy(dest,source,count)         ( {CopyMem(dest,source,(UINTN)(count)); dest; })
-#define memset(dest,ch,count)             SetMem(dest,(UINTN)(count),(UINT8)(ch))
 #define memchr(buf,ch,count)              ScanMem8((CHAR8 *)buf,(UINTN)(count),ch)
-#define memcmp(buf1,buf2,count)           (int)(CompareMem(buf1,buf2,(UINTN)(count)))
-#define memmove(dest,source,count)        CopyMem(dest,source,(UINTN)(count))
 #define strlen(str)                       (size_t)(AsciiStrLen((CHAR8 *)str))
 #define strcpy(strDest,strSource)         AsciiStrCpy(strDest,strSource)
 #define strncpy(strDest,strSource,count)  AsciiStrnCpy(strDest,strSource,(UINTN)count)
@@ -381,7 +293,7 @@ extern FILE  *stdout;
 #define gettimeofday(tvp,tz)              do { (tvp)->tv_sec = time(NULL); (tvp)->tv_usec = 0; } while (0)
 #define gmtime_r(timer,result)            (result = NULL)
 
-void clear_ca_warning();
-BOOLEAN get_ca_warning();
+void clear_ca_warning(void);
+BOOLEAN get_ca_warning(void);
 
 #endif
-- 
2.14.1

